name: AppSec Tests
on:
  workflow_dispatch: # manually
  schedule: # nightly
    - cron: "0 0 * * *"
  pull_request: # on pull requests touching appsec files
    #paths:
    #  - 'internal/appsec/**'
    #  - 'appsec/**'
    #  - 'contrib/**/appsec.go'
env:
  DD_APPSEC_WAF_TIMEOUT: 5s
  GODEBUG: cgocheck=2
  JUNIT_REPORT: gotestsum-report.xml
  CI_APP_SERVICE_NAME: dd-trace-go
  DD_CI_API_KEY: ${{ secrets.DD_CI_API_KEY }}
jobs:
  native:
    strategy:
      matrix:
        runs-on: [ macos-latest, ubuntu-latest, windows-latest ]
        go-version: [ 1.18, 1.17, 1.16 ]
        cgo_enabled: # test it compiles with and without cgo
          - 0
          - 1
        build_tags: # test it compiles with and without the appsec build tag
          - ""
          - "appsec"
        appsec_enabled: # test it compiles with and without appsec enabled
          - true
          - false
      fail-fast: false
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
      - name: go test
        shell: bash
        run: |
          # Install gotestsum to get the results in a junit file 
          env GOBIN=$PWD go install gotest.tools/gotestsum@latest
          # Run the tests with gotestsum
          env CGO_ENABLED=${{ matrix.cgo_enabled }} DD_APPSEC_ENABLED=${{ matrix.appsec_enabled }}
          ./gotestsum --junitfile $JUNIT_REPORT -- -v ${{ matrix.build_tags != '' && format('-tags="{0}"', matrix.build_tags) || ''}} \
            ./appsec/... \
            ./internal/appsec/... \
            ./contrib/google.golang.org/grpc/... \
            ./contrib/net/http/... \
            ./contrib/gorilla/mux/... \
            ./contrib/go-chi/... \
            ./contrib/labstack/echo.v4/... \
            ./contrib/gin-gonic/gin/...

      - name: Install Datadog CI App CLI for Linux
        if: matrix.runs-on == 'ubuntu-latest'
        run: curl -L --fail "https://github.com/DataDog/datadog-ci/releases/latest/download/datadog-ci_linux-x64" --output datadog-ci
      - name: Install Datadog CI App CLI for macOS
        if: matrix.runs-on == 'macos-latest'
        run: curl -L --fail "https://github.com/DataDog/datadog-ci/releases/latest/download/datadog-ci_darwin-x64" --output datadog-ci
      - name: Install Datadog CI App CLI for Windows
        if: matrix.runs-on == 'windows-latest'
        run: curl -L --fail "https://github.com/DataDog/datadog-ci/releases/latest/download/datadog-ci_win-x64.exe" --output datadog-ci
      - name: Upload test results to Datadog's CI App
        run: |
          chmod +x datadog-ci
          env DD_API_KEY=$DD_CI_API_KEY /tmp/datadog-ci junit upload \
            --service $CI_APP_SERVICE_NAME \
            --tags "go:${{ matrix.go-version }}" \
            --tags "os:${{ matrix.runs-on }}" \
            $JUNIT_REPORT

  # Same tests but on the official golang container for linux
  golang-linux-container:
    runs-on: ubuntu-latest
    container:
      image: golang:${{ matrix.go-version }}-${{ matrix.distribution }}
    strategy:
      matrix:
        go-version: [ 1.18, 1.17, 1.16 ]
        distribution: [ bullseye, buster, alpine ]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      # Install gcc and the libc headers on alpine images
      - if: ${{ matrix.distribution == 'alpine' }}
        run: apk add gcc musl-dev libc6-compat git
      - name: go test
        run: |
          # Install gotestsum to get the results in a junit file 
          env GOBIN=$PWD go install gotest.tools/gotestsum@latest
          # Run the tests with gotestsum
          env CGO_ENABLED=${{ matrix.cgo_enabled }} DD_APPSEC_ENABLED=${{ matrix.appsec_enabled }}
          ./gotestsum --junitfile $JUNIT_REPORT -- -v ${{ matrix.build_tags != '' && format('-tags="{0}"', matrix.build_tags) || ''}} \
            ./appsec/... \
            ./internal/appsec/... \
            ./contrib/google.golang.org/grpc/... \
            ./contrib/net/http/... \
            ./contrib/gorilla/mux/... \
            ./contrib/go-chi/... \
            ./contrib/labstack/echo.v4/... \
            ./contrib/gin-gonic/gin/...

      - name: Upload Datadog CI App CLI
        if: ${{ matrix.distribution != 'alpine' }}
        run: |
          apk add curl
          curl -L --fail "https://github.com/DataDog/datadog-ci/releases/latest/download/datadog-ci_linux-x64" --output "/tmp/datadog-ci"
          chmod +x "/tmp/datadog-ci"
          env DD_API_KEY=$DD_CI_API_KEY /tmp/datadog-ci junit upload \
            --service $CI_APP_SERVICE_NAME \
            --tags "go:${{ matrix.go-version }}" \
            --tags "arch:${{ runner.arch }}" \
            --tags "os:${{ runner.os }}" \
            --tags "distribution:${{ runner.distribution }}" \
            $JUNIT_REPORT
