name: Unit and Integration Tests

on:
  workflow_call:
    inputs:
      go-version:
        required: true
        type: string
      ref:
        description: 'The branch to run the workflow on'
        required: true
        type: string

env:
  DD_APPSEC_WAF_TIMEOUT: 1m # Increase time WAF time budget to reduce CI flakiness

jobs:
  copyright:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Copyright
        run: |
          go run checkcopyright.go

  lint:
    runs-on:
      group: "APM Larger Runners"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: golangci-lint
        uses: reviewdog/action-golangci-lint@v2
        with:
          go_version: ${{ inputs.go-version }}
          golangci_lint_version: v1.52.2
          fail_on_error: true
          reporter: github-pr-review

  test-contrib:
    runs-on:
      group: "APM Larger Runners"
    env:
       TEST_RESULTS: /tmp/test-results # path to where test results will be saved
       INTEGRATION: true
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_HOSTNAME: "github-actions-worker"
          DD_APM_ENABLED: true
          DD_BIND_HOST: "0.0.0.0"
          DD_API_KEY: "invalid_key_but_this_is_fine"
          DD_TEST_AGENT_HOST: "localhost"
          DD_TEST_AGENT_PORT: 9126
        # We need to specify a custom health-check. By default, this container will remain "unhealthy" since
        # we don't fully configure it with a valid API key (and possibly other reasons)
        # This command just checks for our ability to connect to port 8126
        options: >-
          --health-cmd "bash -c '</dev/tcp/127.0.0.1/8126'"
        ports:
          - 8125:8125/udp
          - 8126:8126
      testagent:
        image: ghcr.io/datadog/dd-apm-test-agent/ddapm-test-agent:v1.11.0
        ports:
          - 9126:9126
        env:
          LOG_LEVEL: DEBUG
          TRACE_LANGUAGE: golang
          ENABLED_CHECKS: trace_stall,trace_count_header,trace_peer_service,trace_dd_service
          PORT: 9126
          DD_SUPPRESS_TRACE_PARSE_ERRORS: true
          DD_POOL_TRACE_CHECK_FAILURES: true
          DD_DISABLE_ERROR_RESPONSES: true
      cassandra:
        image: cassandra:3.7
        env:
          JVM_OPTS: "-Xms750m -Xmx750m"
        ports:
          - 9042:9042
      mysql:
        image: circleci/mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: admin
          MYSQL_PASSWORD: test
          MYSQL_USER: test
          MYSQL_DATABASE: test
        ports:
          - 3306:3306
      postgres:
        image: circleci/postgres:9.5
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
      mssql:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
         SA_PASSWORD: myPassw0rd
         ACCEPT_EULA: Y
        ports:
          - 1433:1433
      consul:
        image: consul:1.6.0
        ports:
          - 8500:8500
      redis:
        image: redis:3.2
        ports:
          - 6379:6379
      elasticsearch2:
        image: elasticsearch:2
        env:
          ES_JAVA_OPTS: "-Xms750m -Xmx750m" # https://github.com/10up/wp-local-docker/issues/6
        ports:
          - 9200:9200
      elasticsearch5:
        image: elasticsearch:5
        env:
          ES_JAVA_OPTS: "-Xms750m -Xmx750m" # https://github.com/10up/wp-local-docker/issues/6
        ports:
          - 9201:9200
      elasticsearch6:
        image: elasticsearch:6.8.13
        env:
          ES_JAVA_OPTS: "-Xms750m -Xmx750m" # https://github.com/10up/wp-local-docker/issues/6
        ports:
          - 9202:9200
      elasticsearch7:
        image: elasticsearch:7.14.1
        env:
          ES_JAVA_OPTS: "-Xms750m -Xmx750m" # https://github.com/10up/wp-local-docker/issues/6
          discovery.type: single-node
        ports:
          - 9203:9200
      elasticsearch8:
        image: elasticsearch:8.6.2
        env:
          ES_JAVA_OPTS: "-Xms750m -Xmx750m" # https://github.com/10up/wp-local-docker/issues/6
          discovery.type: single-node
          xpack.security.enabled: false
        ports:
          - 9204:9200
      mongo:
        image: circleci/mongo:latest-ram
        ports:
          - 27017:27017
      memcached:
        image: memcached:1.5.9
        ports:
          - 11211:11211
      zookeeper:
        image: bitnami/zookeeper:latest
        env:
          ALLOW_ANONYMOUS_LOGIN: "yes"
        ports:
          - 2181:2181
      kafka:
        image: darccio/kafka:2.13-2.8.1
        env:
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
          KAFKA_CREATE_TOPICS: gotest:1:1,gosegtest:1:1
          KAFKA_BROKER_ID: 1
        ports:
          - 9092:9092
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Setup Go
        uses: ./.github/actions/setup-go
        with:
          go-version: ${{ inputs.go-version }}

      - name: Test Contrib
        run: |
            mkdir -p $TEST_RESULTS
            PACKAGE_NAMES=$(go list ./contrib/... | grep -v -e grpc.v12 -e google.golang.org/api)
            gotestsum --junitfile ${TEST_RESULTS}/gotestsum-report.xml -- $PACKAGE_NAMES -v -race -coverprofile=coverage.txt -covermode=atomic

      - name: Upload the results to Datadog CI App
        if: always()
        continue-on-error: true
        uses: ./.github/actions/dd-ci-upload
        with:
          dd-api-key: ${{ secrets.DD_CI_API_KEY }}
          files: ${{ env.TEST_RESULTS }}/gotestsum-report*.xml
          tags: go:${{ inputs.go-version }},arch:${{ runner.arch }},os:${{ runner.os }},distribution:${{ runner.distribution }}

      - name: Upload Coverage
        if: always()
        continue-on-error: true
        shell: bash
        run: bash <(curl -s https://codecov.io/bash)

      - name: Get Datadog APM Test Agent Logs
        if: always()
        shell: bash
        run: docker logs ${{ job.services.testagent.id }}

      - name: Get Datadog APM Test Agent Trace Check Summary Results
        if: always()
        shell: bash
        run: |
              RESPONSE=$(curl -s -w "\n%{http_code}" -o response.txt "http://127.0.0.1:9126/test/trace_check/failures?return_all=true")
              RESPONSE_CODE=$(echo "$RESPONSE" | awk 'END {print $NF}')
              SUMMARY_RESPONSE=$(curl -s -w "\n%{http_code}" -o summary_response.txt "http://127.0.0.1:9126/test/trace_check/summary?return_all=true")
              SUMMARY_RESPONSE_CODE=$(echo "$SUMMARY_RESPONSE" | awk 'END {print $NF}')
              if [[ $RESPONSE_CODE -eq 200 ]]; then
                  echo " "
                  cat response.txt
                  echo " - All APM Test Agent Check Traces returned successful!"
                  echo "APM Test Agent Check Traces Summary Results:"
                  cat summary_response.txt | jq "."
              else
                  echo "APM Test Agent Check Traces failed with response code: $RESPONSE_CODE"
                  echo "Failures:"
                  cat response.txt
                  echo "APM Test Agent Check Traces Summary Results:"
                  cat summary_response.txt | jq "."
                  exit 1
              fi

      - name: Testing outlier google.golang.org/api
        run: |
              go get google.golang.org/api@v0.121.0 # version used to generate code
              go mod tidy # Go1.16 doesn't update the sum file correctly after the go get, this tidy fixes it
              go test -v ./contrib/google.golang.org/api/...

      - name: Testing outlier gRPC v1.2
        run: |
              # This hacky approach is necessary because running the tests regularly
              # do not allow using grpc-go@v1.2.0 alongside sketches-go@v1.1.0.
              # sketches-go@v1.0.0 is no longer possible to test because internal/datastreams/propagator.go
              # expects sketches-go to have the package `github.com/DataDog/sketches-go/ddsketch/encoding` which
              # is only present from v1.1.0 onwards.
              go mod vendor

              # Checkout grpc-go@v1.2.0
              cd vendor/google.golang.org && rm -rf grpc
              git clone https://github.com/grpc/grpc-go grpc && cd grpc
              git fetch origin && git checkout v1.2.0 && cd ../../..

              # Checkout sketches-go@v1.1.0
              cd vendor/github.com/DataDog && rm -rf sketches-go
              git clone https://github.com/DataDog/sketches-go && cd sketches-go
              git fetch origin && git checkout v1.1.0 && cd ../../../..

              # Revert to old metadata functions as FromIncomingContext and NewOutgoingContext are not present in v1.2.0.
              # These functions were updated to current versions to avoid compilation errors in the development environments.
              sed  -i 's/metadata\.FromIncomingContext/metadata.FromContext/g' ./contrib/google.golang.org/grpc.v12/*
              sed  -i 's/metadata\.NewOutgoingContext/metadata.NewContext/g' ./contrib/google.golang.org/grpc.v12/*

              go test -mod=vendor -v ./contrib/google.golang.org/grpc.v12/...

  test-core:
    runs-on:
      group: "APM Larger Runners"
    env:
       TEST_RESULTS: /tmp/test-results # path to where test results will be saved
       INTEGRATION: true
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_HOSTNAME: "github-actions-worker"
          DD_APM_ENABLED: true
          DD_BIND_HOST: "0.0.0.0"
          DD_API_KEY: "invalid_key_but_this_is_fine"
        # We need to specify a custom health-check. By default, this container will remain "unhealthy" since
        # we don't fully configure it with a valid API key (and possibly other reasons)
        # This command just checks for our ability to connect to port 8126
        options: >-
          --health-cmd "bash -c '</dev/tcp/127.0.0.1/8126'"
        ports:
          - 8125:8125/udp
          - 8126:8126
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Setup Go
        uses: ./.github/actions/setup-go
        with:
          go-version: ${{ inputs.go-version }}

      - name: Test Core
        env:
          DD_APPSEC_WAF_TIMEOUT: 1h
        run: |
            mkdir -p $TEST_RESULTS
            PACKAGE_NAMES=$(go list ./... | grep -v /contrib/)
            gotestsum --junitfile ${TEST_RESULTS}/gotestsum-report.xml -- $PACKAGE_NAMES -v -race -coverprofile=coverage.txt -covermode=atomic
            cd ./internal/exectracetest
            gotestsum --junitfile ${TEST_RESULTS}/gotestsum-report-exectrace.xml -- -v -race -coverprofile=coverage.txt -covermode=atomic

      - name: Upload the results to Datadog CI App
        if: always()
        continue-on-error: true
        uses: ./.github/actions/dd-ci-upload
        with:
          dd-api-key: ${{ secrets.DD_CI_API_KEY }}
          files: ${{ env.TEST_RESULTS }}/gotestsum-report.xml ${{ env.TEST_RESULTS }}/gotestsum-report-exectrace.xml
          tags: go:${{ inputs.go-version }}},arch:${{ runner.arch }},os:${{ runner.os }},distribution:${{ runner.distribution }}
      - name: Upload Coverage
        if: always()
        shell: bash
        run: bash <(curl -s https://codecov.io/bash)
