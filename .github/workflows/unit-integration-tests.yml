name: Unit and Integration Tests

on:
  workflow_call:
    inputs:
      go-version:
        required: true
        type: string
      ref:
        description: 'The branch to run the workflow on'
        required: true
        type: string

env:
  DD_APPSEC_WAF_TIMEOUT: 1m # Increase time WAF time budget to reduce CI flakiness
  # Users may build our library with GOTOOLCHAIN=local. If they do, and our
  # go.mod file specifies a newer Go version than their local toolchain, their
  # build will break. Run our tests with GOTOOLCHAIN=local to ensure that
  # our library builds with all of the Go versions we claim to support,
  # without having to download a newer one.
  GOTOOLCHAIN: local
  GODEBUG: "x509negativeserial=1"

permissions:
  contents: read

jobs:
  copyright:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
        with:
          ref: ${{ inputs.ref || github.ref }}
      - name: Setup go
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version: ${{ inputs.go-version }}
      - name: Copyright
        run: |
          go run ./scripts/checkcopyright.go

  generate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
        with:
          ref: ${{ inputs.ref || github.ref }}
      - name: Setup Go
        uses: ./.github/actions/setup-go
        with:
          go-version: ${{ inputs.go-version }}
      - name: Install go tools
        run: |-
          ./scripts/install_tools.sh
      - name: Run generator
        run: |-
          ./scripts/generate.sh
      - name: Check for changes
        run: git diff --exit-code

  check-modules:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
        with:
          ref: ${{ inputs.ref || github.ref }}
      - name: Setup Go
        uses: ./.github/actions/setup-go
        with:
          go-version: ${{ inputs.go-version }}
      - name: Run fixmodules
        run: |-
          ./scripts/fix_modules.sh
      - name: Check for changes
        run: git diff --exit-code

  lint:
    runs-on:
      group: "APM Larger Runners"
    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: golangci-lint
        uses: reviewdog/action-golangci-lint@f9bba13753278f6a73b27a56a3ffb1bfda90ed71 # v2.8.0
        with:
          golangci_lint_flags: "--timeout 10m" # We are hitting timeout when there is no cache
          go_version: ${{ inputs.go-version }}
          golangci_lint_version: v2.1.2
          fail_level: error
          reporter: github-pr-review

      - name: golangci-lint (internal/orchestrion/_integration)
        uses: reviewdog/action-golangci-lint@f9bba13753278f6a73b27a56a3ffb1bfda90ed71 # v2.8.0
        with:
          golangci_lint_flags: "--timeout 10m" # We are hitting timeout when there is no cache
          go_version: ${{ inputs.go-version }}
          golangci_lint_version: v2.1.2
          fail_level: error
          reporter: github-pr-review
          workdir: internal/orchestrion/_integration

  test-core:
    runs-on:
      group: "APM Larger Runners"
    env:
       TEST_RESULTS: /tmp/test-results # path to where test results will be saved
       INTEGRATION: true
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_HOSTNAME: "github-actions-worker"
          DD_APM_ENABLED: true
          DD_BIND_HOST: "0.0.0.0"
          DD_API_KEY: "invalid_key_but_this_is_fine"
        # We need to specify a custom health-check. By default, this container will remain "unhealthy" since
        # we don't fully configure it with a valid API key (and possibly other reasons)
        # This command just checks for our ability to connect to port 8126
        options: >-
          --health-cmd "bash -c '</dev/tcp/127.0.0.1/8126'"
        ports:
          - 8125:8125/udp
          - 8126:8126
    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Setup Go
        uses: ./.github/actions/setup-go
        with:
          go-version: ${{ inputs.go-version }}

      - name: Test Core
        env:
          DD_APPSEC_WAF_TIMEOUT: 1h
        run: |
            mkdir -p $TEST_RESULTS
            PACKAGE_NAMES=$(go list ./... | grep -v /contrib/)
            gotestsum --junitfile ${TEST_RESULTS}/gotestsum-report.xml -- $PACKAGE_NAMES -v -race -coverprofile=coverage.txt -covermode=atomic
            cd ./internal/exectracetest
            gotestsum --junitfile ${TEST_RESULTS}/gotestsum-report-exectrace.xml -- -v -race -coverprofile=coverage.txt -covermode=atomic

      - name: Upload the results to Datadog CI App
        if: always()
        continue-on-error: true
        uses: ./.github/actions/dd-ci-upload
        with:
          dd-api-key: ${{ secrets.DD_CI_API_KEY }}
          files: ${{ env.TEST_RESULTS }}/gotestsum-report.xml ${{ env.TEST_RESULTS }}/gotestsum-report-exectrace.xml
          tags: go:${{ inputs.go-version }}},arch:${{ runner.arch }},os:${{ runner.os }},distribution:${{ runner.distribution }}
      - name: Upload Coverage
        if: always()
        shell: bash
        run: bash <(curl -s https://codecov.io/bash)
