name: Smoke Tests

on:
  workflow_call: # allows to reuse this workflow
    inputs:
      ref:
        description: 'The branch to run the workflow on'
        required: true
        type: string
  push:
    branches:
      - main
      - release-v*
    tags:
      - '**'
  schedule: # nightly
    - cron: "0 0 * * *"
  workflow_dispatch: {} # manually

jobs:
  go-get-u:
    #  Run go get -u to upgrade dd-trace-go dependencies to their
    #  latest minor version and see if dd-trace-go still compiles.
    #  Related to issue https://github.com/DataDog/dd-trace-go/issues/1607
    name: 'dd-trace-go still works after go get -u'
    runs-on: ubuntu-latest
    env:
      PACKAGES: ./internal/... ./ddtrace/... ./profiler/... ./appsec/...
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ inputs.ref || github.ref }}
      - uses: actions/setup-go@v3
        with:
          go-version: "stable"
          cache: true
      - name: go get -u
        run: |
          go get -u $PACKAGES
          go mod tidy
      - name: Compile dd-trace-go
        run: go build $PACKAGES
      - name: Test dd-trace-go
        run: go test $PACKAGES

  setup-requirements:
    name: 'Compilation and deployment requirements follow Go standards'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [ "1.21", "1.20", "1.19" ]
        build-env: [ latest, bookworm, bullseye ]
        buildmode: [ base, go-mod-vendor ]
        build-with-cgo: [ 0, 1 ]
        deployment-env: [ alpine, debian-bullseye, debian-bookworm ]
        include:
          # alpine as build env is only compatible with alpine deployment envs
          # they indeed name their libc libmusl.so instead of libc.so
          - build-env: alpine
            deployment-env: alpine

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v5
        with:
          context: .
          file: ./internal/apps/setup-smoke-test/Dockerfile
          push: false
          load: true
          tags: smoke-test
          target: ${{ matrix.distrib }}
          build-args: |
            build-env=${{ matrix.build-env }}
            build-mode=${{ matrix.build-mode }}
            build-with-cgo=${{ inputs.build-with-cgo }}
            deployment-env=${{ inputs.deployment-env }}
      - name: Test
        run: |
          docker run -p7777:7777 --rm smoke-test
