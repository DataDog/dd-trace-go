package tracer

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/DataDog/sketches-go/ddsketch"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *aggregableSpan) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "key":
			err = z.key.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "key")
				return
			}
		case "Start":
			z.Start, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Start")
				return
			}
		case "Duration":
			z.Duration, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Duration")
				return
			}
		case "Error":
			z.Error, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Error")
				return
			}
		case "TopLevel":
			z.TopLevel, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "TopLevel")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *aggregableSpan) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "key"
	err = en.Append(0x85, 0xa3, 0x6b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = z.key.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "key")
		return
	}
	// write "Start"
	err = en.Append(0xa5, 0x53, 0x74, 0x61, 0x72, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Start)
	if err != nil {
		err = msgp.WrapError(err, "Start")
		return
	}
	// write "Duration"
	err = en.Append(0xa8, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Duration)
	if err != nil {
		err = msgp.WrapError(err, "Duration")
		return
	}
	// write "Error"
	err = en.Append(0xa5, 0x45, 0x72, 0x72, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Error)
	if err != nil {
		err = msgp.WrapError(err, "Error")
		return
	}
	// write "TopLevel"
	err = en.Append(0xa8, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteBool(z.TopLevel)
	if err != nil {
		err = msgp.WrapError(err, "TopLevel")
		return
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *aggregableSpan) Msgsize() (s int) {
	s = 1 + 4 + z.key.Msgsize() + 6 + msgp.Int64Size + 9 + msgp.Int64Size + 6 + msgp.Int32Size + 9 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *aggregation) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Type":
			z.Type, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "Resource":
			z.Resource, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Resource")
				return
			}
		case "Service":
			z.Service, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Service")
				return
			}
		case "StatusCode":
			z.StatusCode, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "StatusCode")
				return
			}
		case "Synthetics":
			z.Synthetics, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Synthetics")
				return
			}
		case "IsTraceRoot":
			{
				var zb0002 int32
				zb0002, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "IsTraceRoot")
					return
				}
				z.IsTraceRoot = trilean(zb0002)
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *aggregation) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "Name"
	err = en.Append(0x87, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "Type"
	err = en.Append(0xa4, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Type)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "Resource"
	err = en.Append(0xa8, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Resource)
	if err != nil {
		err = msgp.WrapError(err, "Resource")
		return
	}
	// write "Service"
	err = en.Append(0xa7, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Service)
	if err != nil {
		err = msgp.WrapError(err, "Service")
		return
	}
	// write "StatusCode"
	err = en.Append(0xaa, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.StatusCode)
	if err != nil {
		err = msgp.WrapError(err, "StatusCode")
		return
	}
	// write "Synthetics"
	err = en.Append(0xaa, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Synthetics)
	if err != nil {
		err = msgp.WrapError(err, "Synthetics")
		return
	}
	// write "IsTraceRoot"
	err = en.Append(0xab, 0x49, 0x73, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt32(int32(z.IsTraceRoot))
	if err != nil {
		err = msgp.WrapError(err, "IsTraceRoot")
		return
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *aggregation) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 5 + msgp.StringPrefixSize + len(z.Type) + 9 + msgp.StringPrefixSize + len(z.Resource) + 8 + msgp.StringPrefixSize + len(z.Service) + 11 + msgp.Uint32Size + 11 + msgp.BoolSize + 12 + msgp.Int32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *concentrator) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "mu":
			err = z.mu.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "mu")
				return
			}
		case "stopped":
			z.stopped, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "stopped")
				return
			}
		case "wg":
			err = z.wg.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "wg")
				return
			}
		case "bucketSize":
			z.bucketSize, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "bucketSize")
				return
			}
		case "cfg":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "cfg")
					return
				}
				z.cfg = nil
			} else {
				if z.cfg == nil {
					z.cfg = new(config)
				}
				err = z.cfg.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "cfg")
					return
				}
			}
		case "statsdClient":
			err = z.statsdClient.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "statsdClient")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *concentrator) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "mu"
	err = en.Append(0x86, 0xa2, 0x6d, 0x75)
	if err != nil {
		return
	}
	err = z.mu.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "mu")
		return
	}
	// write "stopped"
	err = en.Append(0xa7, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.stopped)
	if err != nil {
		err = msgp.WrapError(err, "stopped")
		return
	}
	// write "wg"
	err = en.Append(0xa2, 0x77, 0x67)
	if err != nil {
		return
	}
	err = z.wg.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "wg")
		return
	}
	// write "bucketSize"
	err = en.Append(0xaa, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.bucketSize)
	if err != nil {
		err = msgp.WrapError(err, "bucketSize")
		return
	}
	// write "cfg"
	err = en.Append(0xa3, 0x63, 0x66, 0x67)
	if err != nil {
		return
	}
	if z.cfg == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.cfg.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "cfg")
			return
		}
	}
	// write "statsdClient"
	err = en.Append(0xac, 0x73, 0x74, 0x61, 0x74, 0x73, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = z.statsdClient.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "statsdClient")
		return
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *concentrator) Msgsize() (s int) {
	s = 1 + 3 + z.mu.Msgsize() + 8 + msgp.Uint32Size + 3 + z.wg.Msgsize() + 11 + msgp.Int64Size + 4
	if z.cfg == nil {
		s += msgp.NilSize
	} else {
		s += z.cfg.Msgsize()
	}
	s += 13 + z.statsdClient.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *rawBucket) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "start":
			z.start, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "start")
				return
			}
		case "duration":
			z.duration, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "duration")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z rawBucket) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "start"
	err = en.Append(0x82, 0xa5, 0x73, 0x74, 0x61, 0x72, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.start)
	if err != nil {
		err = msgp.WrapError(err, "start")
		return
	}
	// write "duration"
	err = en.Append(0xa8, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.duration)
	if err != nil {
		err = msgp.WrapError(err, "duration")
		return
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z rawBucket) Msgsize() (s int) {
	s = 1 + 6 + msgp.Uint64Size + 9 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *rawGroupedStats) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "hits":
			z.hits, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "hits")
				return
			}
		case "topLevelHits":
			z.topLevelHits, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "topLevelHits")
				return
			}
		case "errors":
			z.errors, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "errors")
				return
			}
		case "duration":
			z.duration, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "duration")
				return
			}
		case "okDistribution":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "okDistribution")
					return
				}
				z.okDistribution = nil
			} else {
				if z.okDistribution == nil {
					z.okDistribution = new(ddsketch.DDSketch)
				}
				err = z.okDistribution.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "okDistribution")
					return
				}
			}
		case "errDistribution":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "errDistribution")
					return
				}
				z.errDistribution = nil
			} else {
				if z.errDistribution == nil {
					z.errDistribution = new(ddsketch.DDSketch)
				}
				err = z.errDistribution.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "errDistribution")
					return
				}
			}
		case "IsTraceRoot":
			{
				var zb0002 int32
				zb0002, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "IsTraceRoot")
					return
				}
				z.IsTraceRoot = trilean(zb0002)
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *rawGroupedStats) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "hits"
	err = en.Append(0x87, 0xa4, 0x68, 0x69, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.hits)
	if err != nil {
		err = msgp.WrapError(err, "hits")
		return
	}
	// write "topLevelHits"
	err = en.Append(0xac, 0x74, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x69, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.topLevelHits)
	if err != nil {
		err = msgp.WrapError(err, "topLevelHits")
		return
	}
	// write "errors"
	err = en.Append(0xa6, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.errors)
	if err != nil {
		err = msgp.WrapError(err, "errors")
		return
	}
	// write "duration"
	err = en.Append(0xa8, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.duration)
	if err != nil {
		err = msgp.WrapError(err, "duration")
		return
	}
	// write "okDistribution"
	err = en.Append(0xae, 0x6f, 0x6b, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	if z.okDistribution == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.okDistribution.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "okDistribution")
			return
		}
	}
	// write "errDistribution"
	err = en.Append(0xaf, 0x65, 0x72, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	if z.errDistribution == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.errDistribution.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "errDistribution")
			return
		}
	}
	// write "IsTraceRoot"
	err = en.Append(0xab, 0x49, 0x73, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt32(int32(z.IsTraceRoot))
	if err != nil {
		err = msgp.WrapError(err, "IsTraceRoot")
		return
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *rawGroupedStats) Msgsize() (s int) {
	s = 1 + 5 + msgp.Uint64Size + 13 + msgp.Uint64Size + 7 + msgp.Uint64Size + 9 + msgp.Uint64Size + 15
	if z.okDistribution == nil {
		s += msgp.NilSize
	} else {
		s += z.okDistribution.Msgsize()
	}
	s += 16
	if z.errDistribution == nil {
		s += msgp.NilSize
	} else {
		s += z.errDistribution.Msgsize()
	}
	s += 12 + msgp.Int32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *trilean) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int32
		zb0001, err = dc.ReadInt32()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = trilean(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z trilean) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt32(int32(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z trilean) Msgsize() (s int) {
	s = msgp.Int32Size
	return
}
