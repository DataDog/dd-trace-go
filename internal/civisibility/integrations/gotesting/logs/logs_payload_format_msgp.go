package logs

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *logEntry) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ddsource":
			z.DdSource, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "DdSource")
				return
			}
		case "hostname":
			z.Hostname, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Hostname")
				return
			}
		case "timestamp":
			z.Timestamp, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		case "message":
			z.Message, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Message")
				return
			}
		case "dd.trace_id":
			z.TraceId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TraceId")
				return
			}
		case "dd.span_id":
			z.SpanId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "SpanId")
				return
			}
		case "test.bundle":
			z.TestBundle, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TestBundle")
				return
			}
		case "test.suite":
			z.TestSuite, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TestSuite")
				return
			}
		case "test.name":
			z.TestName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TestName")
				return
			}
		case "service":
			z.Service, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Service")
				return
			}
		case "dd_tags":
			z.DdTags, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "DdTags")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *logEntry) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(11)
	var zb0001Mask uint16 /* 11 bits */
	_ = zb0001Mask
	if z.DdTags == "" {
		zb0001Len--
		zb0001Mask |= 0x400
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// write "ddsource"
		err = en.Append(0xa8, 0x64, 0x64, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.DdSource)
		if err != nil {
			err = msgp.WrapError(err, "DdSource")
			return
		}
		// write "hostname"
		err = en.Append(0xa8, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.Hostname)
		if err != nil {
			err = msgp.WrapError(err, "Hostname")
			return
		}
		// write "timestamp"
		err = en.Append(0xa9, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
		if err != nil {
			return
		}
		err = en.WriteInt64(z.Timestamp)
		if err != nil {
			err = msgp.WrapError(err, "Timestamp")
			return
		}
		// write "message"
		err = en.Append(0xa7, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.Message)
		if err != nil {
			err = msgp.WrapError(err, "Message")
			return
		}
		// write "dd.trace_id"
		err = en.Append(0xab, 0x64, 0x64, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64)
		if err != nil {
			return
		}
		err = en.WriteString(z.TraceId)
		if err != nil {
			err = msgp.WrapError(err, "TraceId")
			return
		}
		// write "dd.span_id"
		err = en.Append(0xaa, 0x64, 0x64, 0x2e, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64)
		if err != nil {
			return
		}
		err = en.WriteString(z.SpanId)
		if err != nil {
			err = msgp.WrapError(err, "SpanId")
			return
		}
		// write "test.bundle"
		err = en.Append(0xab, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.TestBundle)
		if err != nil {
			err = msgp.WrapError(err, "TestBundle")
			return
		}
		// write "test.suite"
		err = en.Append(0xaa, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x75, 0x69, 0x74, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.TestSuite)
		if err != nil {
			err = msgp.WrapError(err, "TestSuite")
			return
		}
		// write "test.name"
		err = en.Append(0xa9, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.TestName)
		if err != nil {
			err = msgp.WrapError(err, "TestName")
			return
		}
		// write "service"
		err = en.Append(0xa7, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.Service)
		if err != nil {
			err = msgp.WrapError(err, "Service")
			return
		}
		if (zb0001Mask & 0x400) == 0 { // if not omitted
			// write "dd_tags"
			err = en.Append(0xa7, 0x64, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73)
			if err != nil {
				return
			}
			err = en.WriteString(z.DdTags)
			if err != nil {
				err = msgp.WrapError(err, "DdTags")
				return
			}
		}
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *logEntry) Msgsize() (s int) {
	s = 1 + 9 + msgp.StringPrefixSize + len(z.DdSource) + 9 + msgp.StringPrefixSize + len(z.Hostname) + 10 + msgp.Int64Size + 8 + msgp.StringPrefixSize + len(z.Message) + 12 + msgp.StringPrefixSize + len(z.TraceId) + 11 + msgp.StringPrefixSize + len(z.SpanId) + 12 + msgp.StringPrefixSize + len(z.TestBundle) + 11 + msgp.StringPrefixSize + len(z.TestSuite) + 10 + msgp.StringPrefixSize + len(z.TestName) + 8 + msgp.StringPrefixSize + len(z.Service) + 8 + msgp.StringPrefixSize + len(z.DdTags)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *logsEntriesPayload) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(logsEntriesPayload, zb0002)
	}
	for zb0001 := range *z {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			(*z)[zb0001] = nil
		} else {
			if (*z)[zb0001] == nil {
				(*z)[zb0001] = new(logEntry)
			}
			err = (*z)[zb0001].DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z logsEntriesPayload) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0003 := range z {
		if z[zb0003] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z[zb0003].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, zb0003)
				return
			}
		}
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z logsEntriesPayload) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0003 := range z {
		if z[zb0003] == nil {
			s += msgp.NilSize
		} else {
			s += z[zb0003].Msgsize()
		}
	}
	return
}
