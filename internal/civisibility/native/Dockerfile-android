# Stage 1: Build the static library
FROM golang:1 AS builder

# Install dependencies
RUN apt-get update && apt search openjdk && apt-get install -y gcc musl-tools build-essential devscripts openjdk-17-jdk
#RUN apk add --no-cache gcc musl-dev

# install android sdk
# download URL: https://developer.android.com/studio#command-tools
ENV ANDROID_HOME=/root
ENV PATH=$PATH:$ANDROID_HOME/cmdline-tools/tools:$ANDROID_HOME/cmdline-tools/tools/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools:$ANDROID_HOME/ndk-bundle:$ANDROID_HOME/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin:$ANDROID_HOME/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include
RUN curl -L https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o sdktools.zip && \
    unzip sdktools.zip -d /root/cmdline-tools && \
    mv /root/cmdline-tools/cmdline-tools /root/cmdline-tools/tools && \
    rm sdktools.zip
RUN mkdir ~/.android && touch ~/.android/repositories.cfg && \
    yes | sdkmanager "platform-tools" "build-tools;34.0.0" "platforms;android-21"

# install android ndk
# 'ndk-bundle' is the default directory name when NDK is installed through Android Studio so reusing that naming convention
# download URL: https://developer.android.com/ndk/downloads
RUN curl -L https://dl.google.com/android/repository/android-ndk-r27c-linux.zip -o androidndk.zip && \
    unzip androidndk.zip -d /root && \
    rm androidndk.zip && \
    mv /root/android-ndk* /root/ndk-bundle

# setup env vars and paths
ENV CONTAINER=true \
    ANDROID_SDK_PATH=/root \
    ANDROID_SDK_ROOT=/root \
    ANDROID_NDK_PATH=/root/ndk-bundle \
    ANDROID_NDK_ROOT=/root/ndk-bundle

# Argument can be set during build time with --build-arg GOARCH=arm64
ARG GOARCH=amd64

# Configure environment variables for CGO, operating system, architecture, and compiler
ENV CGO_LDFLAGS_ALLOW=".*" \
    CGO_ENABLED=1 \
    GOOS=android \
    GOARCH=arm64 \
    CC=aarch64-linux-android21-clang \
    CGO_CFLAGS="--sysroot=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/sysroot" \
    CGO_LDFLAGS="-s -w"

WORKDIR /app

# Copy everything from the current directory to the PWD (Present Working Directory) inside the container
COPY . .

WORKDIR /app/internal/civisibility/native

# Build the library
RUN go build -tags civisibility_native -buildmode=c-shared -o ./output/dynamic/libtestoptimization.so *.go

# Stage 2: Extract the library
FROM alpine:latest

# Build arguments for the final archive names; you can override these during build
ARG FILE_NAME=libcivisibility

# Install p7zip for compression
RUN apk add --no-cache p7zip

# Create the output folder
RUN mkdir -p /output

# Copy the static library and header from the builder stage
COPY --from=builder /app/internal/civisibility/native/output/dynamic/libtestoptimization.so /output/dynamic/libtestoptimization.so
COPY --from=builder /app/internal/civisibility/native/output/dynamic/libtestoptimization.h /output/dynamic/libtestoptimization.h

# Compress both files into a 7z archive
RUN 7z a /output/${FILE_NAME}-dynamic.7z /output/dynamic/*.*
# Create a SHA256 checksum file for the archive
RUN sha256sum /output/${FILE_NAME}-dynamic.7z > /output/${FILE_NAME}-dynamic.7z.sha256sum

RUN rm -r /output/dynamic

# Command to run when the container starts
ENTRYPOINT ["sh", "-c", "ls /output && cp /output/*.* /libtestoptimization && echo 'Static library copied.'"]
