//
//Run this generate Go code after changing things below:
//
//protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative internal/traceprof/testapp/test_app.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: internal/traceprof/testapp/test_app.proto

package testapp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TestApp_Work_FullMethodName = "/testapp.TestApp/Work"
)

// TestAppClient is the client API for TestApp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestAppClient interface {
	Work(ctx context.Context, in *WorkReq, opts ...grpc.CallOption) (*WorkRes, error)
}

type testAppClient struct {
	cc grpc.ClientConnInterface
}

func NewTestAppClient(cc grpc.ClientConnInterface) TestAppClient {
	return &testAppClient{cc}
}

func (c *testAppClient) Work(ctx context.Context, in *WorkReq, opts ...grpc.CallOption) (*WorkRes, error) {
	out := new(WorkRes)
	err := c.cc.Invoke(ctx, TestApp_Work_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestAppServer is the server API for TestApp service.
// All implementations must embed UnimplementedTestAppServer
// for forward compatibility
type TestAppServer interface {
	Work(context.Context, *WorkReq) (*WorkRes, error)
	mustEmbedUnimplementedTestAppServer()
}

// UnimplementedTestAppServer must be embedded to have forward compatible implementations.
type UnimplementedTestAppServer struct {
}

func (UnimplementedTestAppServer) Work(context.Context, *WorkReq) (*WorkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Work not implemented")
}
func (UnimplementedTestAppServer) mustEmbedUnimplementedTestAppServer() {}

// UnsafeTestAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestAppServer will
// result in compilation errors.
type UnsafeTestAppServer interface {
	mustEmbedUnimplementedTestAppServer()
}

func RegisterTestAppServer(s grpc.ServiceRegistrar, srv TestAppServer) {
	s.RegisterService(&TestApp_ServiceDesc, srv)
}

func _TestApp_Work_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestAppServer).Work(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestApp_Work_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestAppServer).Work(ctx, req.(*WorkReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TestApp_ServiceDesc is the grpc.ServiceDesc for TestApp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestApp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testapp.TestApp",
	HandlerType: (*TestAppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Work",
			Handler:    _TestApp_Work_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/traceprof/testapp/test_app.proto",
}
