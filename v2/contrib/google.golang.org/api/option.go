// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2016 Datadog, Inc.

package api

import (
	"context"
	"math"

	"github.com/DataDog/dd-trace-go/v2/internal"
)

type config struct {
	serviceName              string
	ctx                      context.Context
	analyticsRate            float64
	scopes                   []string
	endpointMetadataDisabled bool
}

func newConfig(options ...Option) *config {
	rate := math.NaN()
	if internal.BoolEnv("DD_TRACE_GOOGLE_API_ANALYTICS_ENABLED", false) {
		rate = 1.0
	}
	cfg := &config{
		ctx: context.Background(),
		// analyticsRate: globalconfig.AnalyticsRate(),
		analyticsRate:            rate,
		endpointMetadataDisabled: false,
	}
	for _, opt := range options {
		opt.apply(cfg)
	}
	return cfg
}

// Option describes options for the Google API integration.
type Option interface {
	apply(*config)
}

// OptionFn represents options applicable to NewClient and WrapRoundTripper.
type OptionFn func(*config)

func (fn OptionFn) apply(cfg *config) {
	fn(cfg)
}

// WithContext sets the context in the config. This can be used to set span
// parents or pass a context through to the underlying client constructor.
func WithContext(ctx context.Context) OptionFn {
	return func(cfg *config) {
		cfg.ctx = ctx
	}
}

// WithScopes sets the scopes used to create the oauth2 config for Google APIs.
func WithScopes(scopes ...string) OptionFn {
	return func(cfg *config) {
		cfg.scopes = scopes
	}
}

// WithService sets the service name in the config. The default service
// name is inferred from the API definitions based on the http request route.
func WithService(serviceName string) OptionFn {
	return func(cfg *config) {
		cfg.serviceName = serviceName
	}
}

// WithAnalytics enables Trace Analytics for all started spans.
func WithAnalytics(on bool) OptionFn {
	return func(cfg *config) {
		if on {
			cfg.analyticsRate = 1.0
		} else {
			cfg.analyticsRate = math.NaN()
		}
	}
}

// WithAnalyticsRate sets the sampling rate for Trace Analytics events
// correlated to started spans.
func WithAnalyticsRate(rate float64) OptionFn {
	return func(cfg *config) {
		if rate >= 0.0 && rate <= 1.0 {
			cfg.analyticsRate = rate
		} else {
			cfg.analyticsRate = math.NaN()
		}
	}
}

// WithEndpointMetadataDisabled allows to disable the enriched Google endpoint metadata behavior for
// this integration. Use this option if you are sensitive to changes in some span tags generated by this integration
// that might happen when the used Google endpoint metadata gets regenerated in newer dd-trace-go versions.
func WithEndpointMetadataDisabled() OptionFn {
	return func(cfg *config) {
		cfg.endpointMetadataDisabled = true
	}
}
