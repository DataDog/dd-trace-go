version: 2

plain-go113: &plain-go113
  working_directory: /home/circleci/dd-trace-go.v1
  docker:
    - image: circleci/golang:1.13
      environment:
        GOPATH: "/home/circleci/go"

jobs:
  go1.12-build:
    # Validate that the core builds with go1.12
    docker:
      - image: circleci/golang:1.12
        environment:
          GOPATH: "/home/circleci/go"
    working_directory: /home/circleci/dd-trace-go.v1
    steps:
    - checkout

    - run:
        name: build
        command: |
          go build ./ddtrace/... ./profiler/...

  metadata:
    <<: *plain-go113

    steps:
    - checkout

    - run:
        name: milestone
        command: |
          go run checkmilestone.go

    - run:
        name: copyright
        command: |
          go run checkcopyright.go

  lint:
    <<: *plain-go113

    steps:
    - checkout

    - run:
        name: gofmt
        command: |
          if [ "$(gofmt -e -l . | wc -l)" -gt 0 ]; then
            exit 1
          fi

    - run:
        name: lint
        command: |
          go get -u golang.org/x/lint/golint
          curl -L https://git.io/vp6lP | sh # https://github.com/alecthomas/gometalinter#binary-releases
          ./bin/gometalinter --disable-all --vendor --deadline=60s --enable=golint ./...


  test-core:
    resource_class: xlarge
    <<: *plain-go113

    steps:
      - checkout
      - run:
          name: Testing
          command: go test -v -race `go list ./... | grep -v /contrib/`

  test-contrib:
    resource_class: xlarge
    working_directory: /home/circleci/dd-trace-go.v1
    docker:
      - image: circleci/golang:1.13
        environment:
          GOPATH: "/home/circleci/go"
      - image: cassandra:3.7
      - image: circleci/mysql:5.7
        environment:
          MYSQL_ROOT_PASSWORD: admin
          MYSQL_PASSWORD: test
          MYSQL_USER: test
          MYSQL_DATABASE: test
      - image: circleci/postgres:9.5
        environment:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
      - image: consul:1.6.0
      - image: redis:3.2
      - image: elasticsearch:2
        environment:
          ES_JAVA_OPTS: "-Xms750m -Xmx750m" # https://github.com/10up/wp-local-docker/issues/6
      - image: elasticsearch:5
        environment:
          ES_JAVA_OPTS: "-Xms750m -Xmx750m" # https://github.com/10up/wp-local-docker/issues/6
      - image: datadog/docker-dd-agent
        environment:
          DD_APM_ENABLED: "true"
          DD_BIND_HOST: "0.0.0.0"
          DD_API_KEY: invalid_key_but_this_is_fine
      - image: circleci/mongo:latest-ram
      - image: memcached:1.5.9
      - image: confluentinc/cp-zookeeper:5.0.0
        environment:
          ZOOKEEPER_CLIENT_PORT: "2181"
      - image: confluentinc/cp-kafka:5.0.0
        environment:
          KAFKA_ZOOKEEPER_CONNECT: localhost:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
          KAFKA_CREATE_TOPICS: gotest:1:1
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"

    steps:
      - checkout

      - restore_cache:
          keys:
          - v1-librdkafka-v1.3.0-{{ checksum "/etc/os-release" }}
      - run:
          name: Install librdkafka v1.3.0
          command: |
            if [ ! -d /tmp/librdkafka-v1.3.0 ] ; then
              echo "building librdkafka"
              git clone --branch v1.3.0 https://github.com/edenhill/librdkafka.git /tmp/librdkafka-v1.3.0
              (cd /tmp/librdkafka-v1.3.0 && ./configure && make)
            fi
            echo "installing librdkafka"
            (cd /tmp/librdkafka-v1.3.0 && sudo make install)
            sudo ldconfig
      - save_cache:
          key: v1-librdkafka-v1.3.0-{{ checksum "/etc/os-release" }}
          paths:
          - /tmp/librdkafka-v1.3.0

      - run:
          name: Enforce some dependencies
          command: |
            go get k8s.io/client-go@v0.17.0
            go get k8s.io/apimachinery@v0.17.0

      - run:
          name: Wait for MySQL
          command: dockerize -wait tcp://localhost:3306 -timeout 1m

      - run:
          name: Wait for Postgres
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Wait for Redis
          command: dockerize -wait tcp://localhost:6379 -timeout 1m

      - run:
          name: Wait for ElasticSearch (1)
          command: dockerize -wait http://localhost:9200 -timeout 1m

      - run:
          name: Wait for ElasticSearch (2)
          command: dockerize -wait http://localhost:9201 -timeout 1m

      - run:
          name: Wait for Datadog Agent
          command: dockerize -wait tcp://127.0.0.1:8126 -timeout 1m

      - run:
          name: Wait for Cassandra
          command: dockerize -wait tcp://localhost:9042 -timeout 2m

      - run:
          name: Wait for Mongo
          command: dockerize -wait tcp://localhost:27017 -timeout 1m

      - run:
          name: Wait for Consul
          command: dockerize -wait http://localhost:8500 -timeout 1m

      - run:
          name: Testing
          command: |
                INTEGRATION=1 go test -v -race `go list ./contrib/... | grep -v -e grpc.v12 -e google.golang.org/api`
                go get google.golang.org/grpc@v1.29.0 # https://github.com/grpc/grpc-go/issues/3726
                go test -v ./contrib/google.golang.org/api/...
                go get google.golang.org/grpc@v1.2.0
                go test -v ./contrib/google.golang.org/grpc.v12/...

workflows:
  version: 2
  build-and-test:
    jobs:
      - go1.12-build
      - metadata
      - lint
      - test-core
      - test-contrib
