// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2025 Datadog, Inc.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.20.3
// source: fixtures_test.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FixtureSubMessage_State int32

const (
	FixtureSubMessage_Unset  FixtureSubMessage_State = 0
	FixtureSubMessage_Ready  FixtureSubMessage_State = 1
	FixtureSubMessage_Paused FixtureSubMessage_State = 2
)

// Enum value maps for FixtureSubMessage_State.
var (
	FixtureSubMessage_State_name = map[int32]string{
		0: "Unset",
		1: "Ready",
		2: "Paused",
	}
	FixtureSubMessage_State_value = map[string]int32{
		"Unset":  0,
		"Ready":  1,
		"Paused": 2,
	}
)

func (x FixtureSubMessage_State) Enum() *FixtureSubMessage_State {
	p := new(FixtureSubMessage_State)
	*p = x
	return p
}

func (x FixtureSubMessage_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FixtureSubMessage_State) Descriptor() protoreflect.EnumDescriptor {
	return file_fixtures_test_proto_enumTypes[0].Descriptor()
}

func (FixtureSubMessage_State) Type() protoreflect.EnumType {
	return &file_fixtures_test_proto_enumTypes[0]
}

func (x FixtureSubMessage_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FixtureSubMessage_State.Descriptor instead.
func (FixtureSubMessage_State) EnumDescriptor() ([]byte, []int) {
	return file_fixtures_test_proto_rawDescGZIP(), []int{0, 0}
}

// FixtureSubMessage is used to test enums in schema tracking
type FixtureSubMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State FixtureSubMessage_State `protobuf:"varint,1,opt,name=state,proto3,enum=protobuf.FixtureSubMessage_State" json:"state,omitempty"`
}

func (x *FixtureSubMessage) Reset() {
	*x = FixtureSubMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fixtures_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixtureSubMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixtureSubMessage) ProtoMessage() {}

func (x *FixtureSubMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fixtures_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixtureSubMessage.ProtoReflect.Descriptor instead.
func (*FixtureSubMessage) Descriptor() ([]byte, []int) {
	return file_fixtures_test_proto_rawDescGZIP(), []int{0}
}

func (x *FixtureSubMessage) GetState() FixtureSubMessage_State {
	if x != nil {
		return x.State
	}
	return FixtureSubMessage_Unset
}

// FixtureMessage is used to test schema tracking
type FixtureMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Flags      []bool             `protobuf:"varint,2,rep,packed,name=flags,proto3" json:"flags,omitempty"`
	Count      *int32             `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
	Tags       map[string]string  `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SubMessage *FixtureSubMessage `protobuf:"bytes,5,opt,name=sub_message,json=subMessage,proto3" json:"sub_message,omitempty"`
}

func (x *FixtureMessage) Reset() {
	*x = FixtureMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fixtures_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixtureMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixtureMessage) ProtoMessage() {}

func (x *FixtureMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fixtures_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixtureMessage.ProtoReflect.Descriptor instead.
func (*FixtureMessage) Descriptor() ([]byte, []int) {
	return file_fixtures_test_proto_rawDescGZIP(), []int{1}
}

func (x *FixtureMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FixtureMessage) GetFlags() []bool {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *FixtureMessage) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *FixtureMessage) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *FixtureMessage) GetSubMessage() *FixtureSubMessage {
	if x != nil {
		return x.SubMessage
	}
	return nil
}

var File_fixtures_test_proto protoreflect.FileDescriptor

var file_fixtures_test_proto_rawDesc = []byte{
	0x0a, 0x13, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x22,
	0x77, 0x0a, 0x11, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x29, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x10, 0x02, 0x22, 0x8e, 0x02, 0x0a, 0x0e, 0x46, 0x69, 0x78,
	0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x08, 0x52, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x36, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x44, 0x5a, 0x42, 0x67, 0x6f, 0x70,
	0x6b, 0x67, 0x2e, 0x69, 0x6e, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x67, 0x2f, 0x64, 0x64,
	0x2d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2d, 0x67, 0x6f, 0x2e, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fixtures_test_proto_rawDescOnce sync.Once
	file_fixtures_test_proto_rawDescData = file_fixtures_test_proto_rawDesc
)

func file_fixtures_test_proto_rawDescGZIP() []byte {
	file_fixtures_test_proto_rawDescOnce.Do(func() {
		file_fixtures_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_fixtures_test_proto_rawDescData)
	})
	return file_fixtures_test_proto_rawDescData
}

var file_fixtures_test_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_fixtures_test_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_fixtures_test_proto_goTypes = []interface{}{
	(FixtureSubMessage_State)(0), // 0: protobuf.FixtureSubMessage.State
	(*FixtureSubMessage)(nil),    // 1: protobuf.FixtureSubMessage
	(*FixtureMessage)(nil),       // 2: protobuf.FixtureMessage
	nil,                          // 3: protobuf.FixtureMessage.TagsEntry
}
var file_fixtures_test_proto_depIdxs = []int32{
	0, // 0: protobuf.FixtureSubMessage.state:type_name -> protobuf.FixtureSubMessage.State
	3, // 1: protobuf.FixtureMessage.tags:type_name -> protobuf.FixtureMessage.TagsEntry
	1, // 2: protobuf.FixtureMessage.sub_message:type_name -> protobuf.FixtureSubMessage
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_fixtures_test_proto_init() }
func file_fixtures_test_proto_init() {
	if File_fixtures_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fixtures_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixtureSubMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fixtures_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixtureMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_fixtures_test_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fixtures_test_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fixtures_test_proto_goTypes,
		DependencyIndexes: file_fixtures_test_proto_depIdxs,
		EnumInfos:         file_fixtures_test_proto_enumTypes,
		MessageInfos:      file_fixtures_test_proto_msgTypes,
	}.Build()
	File_fixtures_test_proto = out.File
	file_fixtures_test_proto_rawDesc = nil
	file_fixtures_test_proto_goTypes = nil
	file_fixtures_test_proto_depIdxs = nil
}
