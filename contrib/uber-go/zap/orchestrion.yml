# Unless explicitly stated otherwise all files in this repository are licensed
# under the Apache License Version 2.0.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2023-present Datadog, Inc.
---
# yaml-language-server: $schema=https://datadoghq.dev/orchestrion/schema.json
meta:
  name: github.com/DataDog/dd-trace-go/contrib/uber-go/zap/v2
  description: Tracing & Log correlation for Uber's Zap logging library.

aspects:
  - id: ExtractTracingContext
    join-point:
      struct-definition: github.com/uber-go/zap.Logger
    advice:
      - inject-declarations:
          imports:
            context: context
            telemetry: github.com/DataDog/dd-trace-go/v2/internal/telemetry
            tracer: github.com/DataDog/dd-trace-go/v2/ddtrace/tracer
            ext: github.com/DataDog/dd-trace-go/v2/ddtrace/ext
            zap: go.uber.org/zap
            zapcore: go.uber.org/zap/zapcore
          template: |-
            func init() {
              telemetry.LoadIntegration("uber-go/zap")
              tracer.MarkIntegrationImported("github.com/uber-go/zap")
            }

  - id: Logger.Info
    join-point:
      function-call: '*go.uber.org/zap.Logger.Info'
    advice:
      - wrap-expression:
          imports:
            context: context
            ddzap: github.com/DataDog/dd-trace-go/contrib/uber-go/zap/v2
            zap: go.uber.org/zap
          template: |-
            {{- $ctx := .Function.ArgumentOfType "context.Context" -}}
            {{- if $ctx -}}
              {{ .AST.X }}.With(ddzap.ExtractTracingContext({{ $ctx }})).Info
            {{- else -}}
              {{ .AST.X }}.With(ddzap.ExtractTracingContext(context.TODO())).Info
            {{- end -}}
