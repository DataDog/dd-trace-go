# Unless explicitly stated otherwise all files in this repository are licensed
# under the Apache License Version 2.0.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2023-present Datadog, Inc.
---
# yaml-language-server: $schema=https://datadoghq.dev/orchestrion/schema.json
meta:
  name: github.com/DataDog/dd-trace-go/contrib/sirupsen/logrus/v2
  description: Structured, pluggable logging for Go.

aspects:
  - id: DDContextLogHook
    join-point:
      struct-definition: github.com/sirupsen/logrus.Logger
    advice:
      - inject-declarations:
          imports:
            telemetry: github.com/DataDog/dd-trace-go/v2/internal/telemetry
            tracer: github.com/DataDog/dd-trace-go/v2/ddtrace/tracer
            ext: github.com/DataDog/dd-trace-go/v2/ddtrace/ext
          template: |-
            func init() {
              telemetry.LoadIntegration("sirupsen/logrus")
              tracer.MarkIntegrationImported("github.com/sirupsen/logrus")
            }

            // DDContextLogHook ensures that any span in the log context is correlated to log output.
            type DDContextLogHook struct{}

            // Levels implements logrus.Hook interface, this hook applies to all defined levels
            func (d *DDContextLogHook) Levels() []Level {
              return []Level{PanicLevel, FatalLevel, ErrorLevel, WarnLevel, InfoLevel, DebugLevel, TraceLevel}
            }

            // Fire implements logrus.Hook interface, attaches trace and span details found in entry context
            func (d *DDContextLogHook) Fire(e *Entry) error {
              span, found := tracer.SpanFromContext(e.Context)
              if !found {
                return nil
              }
              e.Data[ext.LogKeyTraceID] = span.Context().TraceID()
              e.Data[ext.LogKeySpanID] = span.Context().SpanID()
              return nil
            }

  - id: New
    join-point:
      all-of:
        - import-path: github.com/sirupsen/logrus
        - function-body:
            function:
              - name: New
    advice:
      - prepend-statements:
          template: |-
            {{- $logger := .Function.Result 0 -}}
            defer func() {
              {{ $logger }}.AddHook(&DDContextLogHook{})
            }()

  - id: '*logrus.Logger'
    join-point:
      struct-literal:
        type: github.com/sirupsen/logrus.Logger
        match: pointer-only
    advice:
      - wrap-expression:
          imports:
            logrus: github.com/sirupsen/logrus
          template: |-
            func(logger *logrus.Logger) *logrus.Logger {
              logger.AddHook(&logrus.DDContextLogHook{})
              return logger
            }({{ . }})

  - id: logrus.Logger
    join-point:
      struct-literal:
        type: github.com/sirupsen/logrus.Logger
        match: value-only
    advice:
      - wrap-expression:
          imports:
            logrus: github.com/sirupsen/logrus
          template: |-
            func(logger logrus.Logger) logrus.Logger {
              logger.AddHook(&logrus.DDContextLogHook{})
              return logger
            }({{ . }})
