package main

import (
	"fmt"
)

func main() {
	fmt.Print(`// Code generated by ./gen do not modify

package httputil

import (
	"net/http"
	"gopkg.in/DataDog/dd-trace-go.v1/ddtrace"
)

// wrapResponseWriter wraps an underlying http.ResponseWriter so that it can
// trace the http response codes. It also checks for various http interfaces
// (Flusher, Pusher, CloseNotifier, Hijacker) and if the underlying
// http.ResponseWriter implements them it generates an unnamed struct with the
// appropriate fields.
//
// This code is generated because we have to account for all the permutations
// of the interfaces.
func wrapResponseWriter(w http.ResponseWriter, span ddtrace.Span) http.ResponseWriter {
	`)

	interfaces := []string{"Flusher", "Pusher", "CloseNotifier", "Hijacker"}
	for _, iface := range interfaces {
		fmt.Printf("h%s, ok%s := w.(http.%s)\n", iface, iface, iface)
	}

	fmt.Println("w = newResponseWriter(w, span)")
	fmt.Println("switch {")

	for pick := len(interfaces); pick > 0; pick-- {
		for _, combo := range combinations(interfaces, pick) {
			fmt.Print(`case `)
			for i, c := range combo {
				if i > 0 {
					fmt.Print(" && ")
				}
				fmt.Print("ok" + c)
			}
			fmt.Println(":")
			fmt.Print("w = struct{http.ResponseWriter")
			for _, c := range combo {
				fmt.Print(";http." + c + " ")
			}
			fmt.Print("}{w")
			for _, c := range combo {
				fmt.Print(",h" + c)
			}
			fmt.Println(`}`)
		}
	}

	fmt.Println("}")
	fmt.Println("return w")
	fmt.Println("}")
}

func combinations(strs []string, pick int) (all [][]string) {
	switch pick {
	case 0:
	case 1:
		for i := range strs {
			all = append(all, strs[i:i+1])
		}
	default:
		for i := range strs {
			for _, next := range combinations(strs[i+1:], pick-1) {
				all = append(all, append([]string{strs[i]}, next...))
			}
		}
	}
	return all
}
