frontend main
    # bind *:80

    # ========== Datadog App & API Protection Configuration ==========
    # DO NOT EDIT
    # This configuration should be placed at the most top of the file
    # to ensure it is executed first.

    filter spoe engine datadog-aap-engine config str("$DD_SPOA_SPOA_CONF_FILE")
    
    # Process the Request Headers
    http-request set-var(txn.timeout) str("$DD_SPOA_TIMEOUT")
    http-request send-spoe-group datadog-aap-engine dd-aap-http-request-headers-msg
    http-request set-var(sess.span_id) var(txn.dd.span_id)

    ## Inject tracing headers when needed. Supporting only Datadog tracing format.
    ## https://docs.datadoghq.com/tracing/trace_collection/trace_context_propagation/#datadog-format
    http-request set-header x-datadog-trace-id %[var(txn.dd.tracing_x_datadog_trace_id)] if { var(txn.dd.tracing_x_datadog_trace_id) -m str }
    http-request set-header x-datadog-parent-id %[var(txn.dd.tracing_x_datadog_parent_id)] if { var(txn.dd.tracing_x_datadog_parent_id) -m str }
    http-request set-header x-datadog-origin %[var(txn.dd.tracing_x_datadog_origin)] if { var(txn.dd.tracing_x_datadog_origin) -m str }
    http-request set-header x-datadog-sampling-priority %[var(txn.dd.tracing_x_datadog_sampling_priority)] if { var(txn.dd.tracing_x_datadog_sampling_priority) -m str }
    http-request set-header x-datadog-tags %[var(txn.dd.tracing_x_datadog_tags)] if { var(txn.dd.tracing_x_datadog_tags) -m str }

    http-request set-var(sess.send_request_body) var(txn.dd.request_body)
    http-request lua.send_blocking_response if { var(txn.dd.blocked) -m bool }

    # Process the Request Body (when needed)
    http-request wait-for-body time 1s if { var(sess.send_request_body) -m bool }
    http-request send-spoe-group datadog-aap-engine dd-aap-http-request-body-msg if { var(sess.send_request_body) -m bool }
    http-request lua.send_blocking_response if { var(sess.send_request_body) -m bool } { var(txn.dd.blocked) -m bool }

    # Process the Response Headers
    http-response send-spoe-group datadog-aap-engine dd-aap-http-response-headers-msg
    http-response set-var(sess.send_response_body) var(txn.dd.request_body)
    http-request lua.send_blocking_response if { var(txn.dd.blocked) -m bool }
    
    # Process the Response Body (when needed)
    http-response wait-for-body time 1s if { var(sess.send_response_body) -m bool }
    http-response send-spoe-group datadog-aap-engine dd-aap-http-response-body-msg if { var(sess.send_response_body) -m bool }
    http-request lua.send_blocking_response if { var(sess.send_response_body) -m bool } { var(txn.dd.blocked) -m bool }
    # ================= END OF DATADOG CONFIGURATION =================
    
    # ...
    # default_backend webserver
